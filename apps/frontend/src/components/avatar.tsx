/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@latest apps/frontend/public/models/6765b17acceb762d9021d41d.glb -o apps/frontend/src/components/avatar.tsx -r public -t
*/

import { useAnimations, useFBX, useGLTF } from '@react-three/drei';
import { useFrame, useLoader } from '@react-three/fiber';
import { button, useControls } from 'leva';
import { useEffect, useMemo, useRef, useState } from 'react';
import {
  Bone,
  FileLoader,
  Group,
  MathUtils,
  MeshStandardMaterial,
  SkinnedMesh,
} from 'three';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    Wolf3D_Hair: SkinnedMesh;
    Wolf3D_Glasses: SkinnedMesh;
    Wolf3D_Body: SkinnedMesh;
    Wolf3D_Outfit_Bottom: SkinnedMesh;
    Wolf3D_Outfit_Footwear: SkinnedMesh;
    Wolf3D_Outfit_Top: SkinnedMesh;
    EyeLeft: SkinnedMesh & {
      morphTargetDictionary: Record<string, number>;
      morphTargetInfluences: number[];
    };
    EyeRight: SkinnedMesh;
    Wolf3D_Head: SkinnedMesh;
    Wolf3D_Teeth: SkinnedMesh;
    Hips: Bone;
  };
  materials: {
    Wolf3D_Hair: MeshStandardMaterial;
    Wolf3D_Glasses: MeshStandardMaterial;
    Wolf3D_Body: MeshStandardMaterial;
    Wolf3D_Outfit_Bottom: MeshStandardMaterial;
    Wolf3D_Outfit_Footwear: MeshStandardMaterial;
    Wolf3D_Outfit_Top: MeshStandardMaterial;
    Wolf3D_Eye: MeshStandardMaterial;
    Wolf3D_Skin: MeshStandardMaterial;
    Wolf3D_Teeth: MeshStandardMaterial;
  };
};

const facialExpressions = {
  default: {},
  smile: {
    browInnerUp: 0.17,
    eyeSquintLeft: 0.4,
    eyeSquintRight: 0.44,
    noseSneerLeft: 0.1700000727403593,
    noseSneerRight: 0.14000002836874015,
    mouthPressLeft: 0.61,
    mouthPressRight: 0.41000000000000003,
  },
  dedain: {
    mouthShrugLower: 1,
    mouthShrugUpper: 1,
    noseSneerLeft: 1,
    noseSneerRight: 1,
  },
  strange: {
    viseme_PP: 1,
    viseme_CH: 0.5700000000000001,
    viseme_SS: 0.9999999999978529,
    viseme_nn: 0.21,
    viseme_RR: 0.13,
    viseme_I: 0.2399999999994847,
    browDownLeft: 0.9999999999978529,
    browDownRight: 0.9999999999978529,
    browInnerUp: 0.76,
    browOuterUpLeft: 0.86,
    browOuterUpRight: 1,
    eyeSquintLeft: 0.38,
    eyeSquintRight: 0.39,
    eyeWideLeft: 1,
    eyeWideRight: 1,
    jawForward: 0.66,
    jawLeft: 1,
    mouthFrownLeft: 1,
    mouthFrownRight: 0.33,
    mouthLowerDownLeft: 0.54,
  },
};

type MouthCues = {
  start: number;
  end: number;
  value: string;
};

type Visemes =
  | 'viseme_PP'
  | 'viseme_kk'
  | 'viseme_I'
  | 'viseme_AA'
  | 'viseme_O'
  | 'viseme_U'
  | 'viseme_FF'
  | 'viseme_TH'
  | 'viseme_PP';

const corresponding: Record<string, Visemes> = {
  A: 'viseme_PP',
  B: 'viseme_kk',
  C: 'viseme_I',
  D: 'viseme_AA',
  E: 'viseme_O',
  F: 'viseme_U',
  G: 'viseme_FF',
  H: 'viseme_TH',
  X: 'viseme_PP',
};

let setupMode = false;

export function Avatar(props: JSX.IntrinsicElements['group']) {
  // const { scene } = useGLTF('models/6765b17acceb762d9021d41d.glb');
  // const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  // const { nodes, materials } = useGraph(clone) as GLTFResult;
  const { nodes, materials, scene } = useGLTF(
    'models/6765b17acceb762d9021d41d.glb'
  ) as GLTFResult;

  // useControls('Audio', {
  //   chat: button(() => chat()),
  // });
  const { playAudio, script } = useControls('Audio', {
    playAudio: false,
    script: {
      value: 'welcome',
      options: ['welcome', 'pizzas', 'cocktail'],
    },
  });

  const audio = useMemo(() => new Audio(`audios/${script}.mp3`), [script]);
  const jsonFile = useLoader(FileLoader, `audios/${script}.json`);
  const lipsync: { mouthCues: MouthCues[] } = JSON.parse(jsonFile as string);

  useEffect(() => {
    if (playAudio) {
      audio.play();
      setAnimation('Drunk');
      // if (script === 'cocktail') {
      //   setAnimation('Talking_0');
      // } else {
      //   setAnimation('Talking_1');
      // }
    } else {
      setAnimation('Idle_0');
      audio.pause();
    }
  }, [playAudio, script, audio]);

  // useEffect(() => {
  //   // console.log(message);
  //   console.log('BOB');
  //   // if (!message) {
  //   setAnimation('Breathing_Idle');
  //   setFacialExpression('strange');
  //   // }
  //   // setAnimation(message.animation);
  //   // setFacialExpression(message.facialExpression);
  //   // setLipsync(message.lipsync);
  //   // const audio = new Audio("data:audio/mp3;base64," + message.audio);
  //   // audio.play();
  //   // setAudio(audio);
  //   // audio.onended = onMessagePlayed;
  //   // }, [message]);
  // }, []);

  const { animations: idleAnimation_0 } = useFBX('animations/Idle_0.fbx');
  const { animations: idleAnimation_1 } = useFBX('animations/Idle_1.fbx');
  const { animations: talkingAnimation_0 } = useFBX('animations/Talking_0.fbx');
  const { animations: talkingAnimation_1 } = useFBX('animations/Talking_1.fbx');
  const { animations: drunkAnimation } = useFBX('animations/Drunk.fbx');

  idleAnimation_0[0].name = 'Idle_0';
  idleAnimation_1[0].name = 'Idle_1';
  talkingAnimation_0[0].name = 'Talking_0';
  talkingAnimation_1[0].name = 'Talking_1';
  drunkAnimation[0].name = 'Drunk';

  const animations = [
    idleAnimation_0[0],
    idleAnimation_1[0],
    talkingAnimation_0[0],
    talkingAnimation_1[0],
    drunkAnimation[0],
  ];

  const [animation, setAnimation] = useState<string>('Idle_0');
  const group = useRef<Group>(null);

  const { actions, mixer } = useAnimations(animations, group);

  useEffect(() => {
    actions[animation]
      ?.reset()
      // @ts-expect-error mixer is not typed
      .fadeIn(mixer.stats.actions.inUse === 0 ? 0 : 0.5)
      .play();
    return () => {
      actions[animation]?.fadeOut(0.5);
    };
  }, [animation, actions, mixer]);

  const [blink, setBlink] = useState(false);
  const [winkLeft, setWinkLeft] = useState(false);
  const [winkRight, setWinkRight] = useState(false);
  const [facialExpression, setFacialExpression] =
    useState<keyof typeof facialExpressions>('default');

  useFrame((state) => {
    // Avatar looks at the camera
    group?.current?.getObjectByName('Head')?.lookAt(state.camera.position);

    // FACIAL EXPRESSIONS
    // We use nodes.EyeLeft.morphTargetDictionary as the dictionnary reference for all morph targets
    !setupMode &&
      nodes.EyeLeft.morphTargetDictionary &&
      Object.keys(nodes.EyeLeft.morphTargetDictionary).forEach((key) => {
        const mapping: Record<string, number> =
          facialExpressions[facialExpression];
        if (key === 'eyeBlinkLeft' || key === 'eyeBlinkRight') {
          return; // eyes wink/blink are handled separately
        }
        if (mapping && mapping[key]) {
          lerpMorphTarget(key, mapping[key], 0.1);
        } else {
          lerpMorphTarget(key, 0, 0.1);
        }
      });
    lerpMorphTarget('eyeBlinkLeft', blink || winkLeft ? 1 : 0, 0.5);
    lerpMorphTarget('eyeBlinkRight', blink || winkRight ? 1 : 0, 0.5);

    // LIPSYNC
    if (setupMode) {
      return;
    }

    // Le bloc ci-dessous ne marche pas - Ã  investiguer
    // const appliedMorphTargets: string[] = [];
    // if (lipsync) {
    //   const currentAudioTime = audio.currentTime;

    //   for (let i = 0; i < lipsync.mouthCues.length; i++) {
    //     const mouthCue = lipsync.mouthCues[i];
    //     if (
    //       currentAudioTime >= mouthCue.start &&
    //       currentAudioTime <= mouthCue.end
    //     ) {
    //       appliedMorphTargets.push(corresponding[mouthCue.value]);
    //       lerpMorphTarget(corresponding[mouthCue.value], 1, 0.2);
    //       break;
    //     }
    //   }
    // }
    // Object.values(corresponding).forEach((value) => {
    //   if (appliedMorphTargets.includes(value)) {
    //     return;
    //   }
    //   lerpMorphTarget(value, 0, 0.1);
    // });

    const currentAudioTime = audio.currentTime;
    if (audio.paused || audio.ended) {
      // setAnimation('Idle_0');
      return;
    }

    const headMorphTargetDictionary = nodes.Wolf3D_Head.morphTargetDictionary;
    const headMorphTargetInfluences = nodes.Wolf3D_Head.morphTargetInfluences;

    const teethMorphTargetDictionary = nodes.Wolf3D_Teeth.morphTargetDictionary;
    const teethMorphTargetInfluences = nodes.Wolf3D_Teeth.morphTargetInfluences;

    Object.values(corresponding).forEach((value) => {
      if (headMorphTargetDictionary && headMorphTargetInfluences) {
        headMorphTargetInfluences[headMorphTargetDictionary[value]] =
          MathUtils.lerp(
            headMorphTargetInfluences[headMorphTargetDictionary[value]],
            0,
            0.5
          );
      }

      if (teethMorphTargetDictionary && teethMorphTargetInfluences) {
        teethMorphTargetInfluences[teethMorphTargetDictionary[value]] =
          MathUtils.lerp(
            teethMorphTargetInfluences[teethMorphTargetDictionary[value]],
            0,
            0.5
          );
      }
    });

    for (let i = 0; i < lipsync.mouthCues.length; i++) {
      const mouthCue = lipsync.mouthCues[i];
      if (
        currentAudioTime >= mouthCue.start &&
        currentAudioTime <= mouthCue.end
      ) {
        if (headMorphTargetDictionary && headMorphTargetInfluences) {
          headMorphTargetInfluences[
            headMorphTargetDictionary[corresponding[mouthCue.value]]
          ] = MathUtils.lerp(
            headMorphTargetInfluences[
              headMorphTargetDictionary[corresponding[mouthCue.value]]
            ],
            1,
            0.5
          );
        }

        if (teethMorphTargetDictionary && teethMorphTargetInfluences) {
          teethMorphTargetInfluences[
            teethMorphTargetDictionary[corresponding[mouthCue.value]]
          ] = MathUtils.lerp(
            teethMorphTargetInfluences[
              teethMorphTargetDictionary[corresponding[mouthCue.value]]
            ],
            1,
            0.5
          );
        }

        break;
      }
    }
  });

  const lerpMorphTarget = (target: string, value: number, speed = 0.1) => {
    scene.traverse((child) => {
      if (
        child instanceof SkinnedMesh &&
        child.isSkinnedMesh &&
        child.morphTargetDictionary
      ) {
        const index = child.morphTargetDictionary[target];
        if (
          index === undefined ||
          !child.morphTargetInfluences ||
          child.morphTargetInfluences[index] === undefined
        ) {
          return;
        }
        child.morphTargetInfluences[index] = MathUtils.lerp(
          child.morphTargetInfluences[index],
          value,
          speed
        );

        if (!setupMode) {
          try {
            set({
              [target]: value,
            });
          } catch (e) {
            console.log('Error setting morph target', e);
          }
        }
      }
    });
  };

  useControls('FacialExpressions', {
    winkLeft: button(() => {
      setWinkLeft(true);
      setTimeout(() => setWinkLeft(false), 300);
    }),
    winkRight: button(() => {
      setWinkRight(true);
      setTimeout(() => setWinkRight(false), 300);
    }),
    animation: {
      value: animation,
      options: animations.map((a) => a.name),
      onChange: (value) => setAnimation(value),
    },
    facialExpression: {
      options: Object.keys(facialExpressions),
      onChange: (value) => setFacialExpression(value),
    },
    enableSetupMode: button(() => {
      setupMode = true;
    }),
    disableSetupMode: button(() => {
      setupMode = false;
    }),
    logMorphTargetValues: button(() => {
      const emotionValues: Record<string, number> = {};
      Object.keys(nodes.EyeLeft.morphTargetDictionary).forEach((key) => {
        if (key === 'eyeBlinkLeft' || key === 'eyeBlinkRight') {
          return; // eyes wink/blink are handled separately
        }
        const value =
          nodes.EyeLeft.morphTargetInfluences[
            nodes.EyeLeft.morphTargetDictionary[key]
          ];
        if (value > 0.01) {
          emotionValues[key] = value;
        }
      });
      console.log(JSON.stringify(emotionValues, null, 2));
    }),
  });

  const [, set] = useControls('MorphTarget', () =>
    Object.assign(
      {},
      ...Object.keys(nodes.EyeLeft.morphTargetDictionary).map((key) => {
        return {
          [key]: {
            label: key,
            value: 0,
            min: nodes.EyeLeft.morphTargetInfluences[
              nodes.EyeLeft.morphTargetDictionary[key]
            ],
            max: 1,
            onChange: (val: number) => {
              if (setupMode) {
                lerpMorphTarget(key, val, 1);
              }
            },
          },
        };
      })
    )
  );

  useEffect(() => {
    let blinkTimeout: ReturnType<typeof setTimeout>;

    const nextBlink = () => {
      blinkTimeout = setTimeout(() => {
        setBlink(true);
        setTimeout(() => {
          setBlink(false);
          nextBlink();
        }, 200);
      }, MathUtils.randInt(1000, 5000));
    };
    nextBlink();
    return () => clearTimeout(blinkTimeout);
  }, []);

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Glasses.geometry}
        material={materials.Wolf3D_Glasses}
        skeleton={nodes.Wolf3D_Glasses.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  );
}

useGLTF.preload('models/6765b17acceb762d9021d41d.glb');
